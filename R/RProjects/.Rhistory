EndDate <- formatCheckEndDate(EndDate)
dateReturn <- checkStartEndDate(StartDate, EndDate)
StartDate <- dateReturn[1]
EndDate <- dateReturn[2]
StartDate <- format(as.Date(StartDate), format="%m-%d-%Y")
EndDate <- format(as.Date(EndDate), format="%m-%d-%Y")
baseURL <- "http://qwwebservices.usgs.gov/Result/search?siteid=USGS-"
#   baseURL <- "http://infotrek.er.usgs.gov/qw_portal_core/Result/search?siteid=USGS-"
url <- paste(baseURL,
siteNumber,
"&pCode=",
ParameterCd,
"&startDateLo=",
StartDate,
"&startDateHi=",
EndDate,
"&countrycode=US&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
Size <- xmlSize(r[["Organization"]])
dateTimeList <- vector()
dataVector <- vector()
qualifier <- vector()
property <- vector()
i<- 2
k <- 1
for (i in 2:Size) {
date <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartDate"]])
time <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartTime"]][["Time"]])
dateTimeNow <- paste(date,time, sep=" ")
numSamples <- (xmlSize(r[["Organization"]][[i]])) - 2
for (j in 1:numSamples) {
USGSPCode <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["USGSPCode"]])
data <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["ResultMeasure"]][["ResultMeasureValue"]])
propertyName <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["CharacteristicName"]])
noDetectionType <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitTypeName"]])
noDetectionLimit <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitMeasure"]][["MeasureValue"]])
propertyName <- gsub("[ (,)-]", ".", propertyName)
if (length(grep("Lower", noDetectionType)) > 0) {
remarkCode <- "<"
data <- noDetectionLimit
} else if (length(grep("Upper", noDetectionType))> 0) {
remarkCode <- ">"
data <- noDetectionLimit
} else {
remarkCode <- NA
}
dateTimeList[k] <- as.character(dateTimeNow)
qualifier[k] <- as.character(remarkCode)
dataVector[k] <- as.numeric(data)
property[k] <- as.character(propertyName)
k <- k + 1
}
}
test <- as.data.frame(qualifier)
test$data <- dataVector
test$propertyName <- property
test$dateTime <- as.Date(dateTimeList)
data <- reshape(test, idvar="dateTime", timevar = "propertyName", direction="wide")
data$dateTime <- as.character(data$dateTime)
Sample <- compressData(data)
}
}
getAllSampleXMLData
getAllSampleXMLData('04027000','00631','2000-01-01','2011-01-01')
library(XML)
getAllSampleXMLData('04027000','00631','2000-01-01','2011-01-01')
library(dataRetrieval)
getAllSampleXMLData('04027000','00631','2000-01-01','2011-01-01')
library(XML)
library(dataRetrieval)
getAllSampleXMLData <- function(siteNumber,ParameterCd,StartDate,EndDate){
StartDate <- dateReturn[1]
EndDate <- dateReturn[2]
StartDate <- format(as.Date(StartDate), format="%m-%d-%Y")
EndDate <- format(as.Date(EndDate), format="%m-%d-%Y")
baseURL <- "http://qwwebservices.usgs.gov/Result/search?siteid=USGS-"
#   baseURL <- "http://infotrek.er.usgs.gov/qw_portal_core/Result/search?siteid=USGS-"
url <- paste(baseURL,
siteNumber,
"&pCode=",
ParameterCd,
"&startDateLo=",
StartDate,
"&startDateHi=",
EndDate,
"&countrycode=US&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
Size <- xmlSize(r[["Organization"]])
dateTimeList <- vector()
dataVector <- vector()
qualifier <- vector()
property <- vector()
i<- 2
k <- 1
for (i in 2:Size) {
date <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartDate"]])
time <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartTime"]][["Time"]])
dateTimeNow <- paste(date,time, sep=" ")
numSamples <- (xmlSize(r[["Organization"]][[i]])) - 2
for (j in 1:numSamples) {
USGSPCode <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["USGSPCode"]])
data <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["ResultMeasure"]][["ResultMeasureValue"]])
propertyName <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["CharacteristicName"]])
noDetectionType <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitTypeName"]])
noDetectionLimit <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitMeasure"]][["MeasureValue"]])
propertyName <- gsub("[ (,)-]", ".", propertyName)
if (length(grep("Lower", noDetectionType)) > 0) {
remarkCode <- "<"
data <- noDetectionLimit
} else if (length(grep("Upper", noDetectionType))> 0) {
remarkCode <- ">"
data <- noDetectionLimit
} else {
remarkCode <- NA
}
dateTimeList[k] <- as.character(dateTimeNow)
qualifier[k] <- as.character(remarkCode)
dataVector[k] <- as.numeric(data)
property[k] <- as.character(propertyName)
k <- k + 1
}
}
test <- as.data.frame(qualifier)
test$data <- dataVector
test$propertyName <- property
test$dateTime <- as.Date(dateTimeList)
data <- reshape(test, idvar="dateTime", timevar = "propertyName", direction="wide")
data$dateTime <- as.character(data$dateTime)
Sample <- compressData(data)
}
getAllSampleXMLData <- function(siteNumber,ParameterCd,StartDate,EndDate){
}
library(XML)
library(dataRetrieval)
getAllSampleXMLData <- function(siteNumber,ParameterCd,StartDate,EndDate){
StartDate <- dateReturn[1]
EndDate <- dateReturn[2]
StartDate <- format(as.Date(StartDate), format="%m-%d-%Y")
EndDate <- format(as.Date(EndDate), format="%m-%d-%Y")
baseURL <- "http://qwwebservices.usgs.gov/Result/search?siteid=USGS-"
#   baseURL <- "http://infotrek.er.usgs.gov/qw_portal_core/Result/search?siteid=USGS-"
url <- paste(baseURL,
siteNumber,
"&pCode=",
ParameterCd,
"&startDateLo=",
StartDate,
"&startDateHi=",
EndDate,
"&countrycode=US&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
Size <- xmlSize(r[["Organization"]])
dateTimeList <- vector()
dataVector <- vector()
qualifier <- vector()
property <- vector()
i<- 2
k <- 1
for (i in 2:Size) {
date <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartDate"]])
time <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartTime"]][["Time"]])
dateTimeNow <- paste(date,time, sep=" ")
numSamples <- (xmlSize(r[["Organization"]][[i]])) - 2
for (j in 1:numSamples) {
USGSPCode <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["USGSPCode"]])
data <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["ResultMeasure"]][["ResultMeasureValue"]])
propertyName <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["CharacteristicName"]])
noDetectionType <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitTypeName"]])
noDetectionLimit <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitMeasure"]][["MeasureValue"]])
propertyName <- gsub("[ (,)-]", ".", propertyName)
if (length(grep("Lower", noDetectionType)) > 0) {
remarkCode <- "<"
data <- noDetectionLimit
} else if (length(grep("Upper", noDetectionType))> 0) {
remarkCode <- ">"
data <- noDetectionLimit
} else {
remarkCode <- NA
}
dateTimeList[k] <- as.character(dateTimeNow)
qualifier[k] <- as.character(remarkCode)
dataVector[k] <- as.numeric(data)
property[k] <- as.character(propertyName)
k <- k + 1
}
}
test <- as.data.frame(qualifier)
test$data <- dataVector
test$propertyName <- property
test$dateTime <- as.Date(dateTimeList)
data <- reshape(test, idvar="dateTime", timevar = "propertyName", direction="wide")
data$dateTime <- as.character(data$dateTime)
Sample <- compressData(data)
}
getAllSampleXMLData('04027000','00631','2000-01-01','2011-01-01')
library(XML)
library(dataRetrieval)
getAllSampleXMLData <- function(siteNumber,ParameterCd,StartDate,EndDate){
siteNumber <- formatCheckSiteNumber(siteNumber)
ParameterCd <- formatCheckParameterCd(ParameterCd)
StartDate <- formatCheckDate(StartDate)
EndDate <- formatCheckDate(EndDate)
dateReturn <- checkStartEndDate(StartDate, EndDate)
EndDate <- dateReturn[2]
StartDate <- format(as.Date(StartDate), format="%m-%d-%Y")
StartDate <- dateReturn[1]
EndDate <- format(as.Date(EndDate), format="%m-%d-%Y")
baseURL <- "http://qwwebservices.usgs.gov/Result/search?siteid=USGS-"
#   baseURL <- "http://infotrek.er.usgs.gov/qw_portal_core/Result/search?siteid=USGS-"
url <- paste(baseURL,
siteNumber,
"&pCode=",
ParameterCd,
"&startDateLo=",
StartDate,
"&startDateHi=",
EndDate,
"&countrycode=US&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
Size <- xmlSize(r[["Organization"]])
dateTimeList <- vector()
dataVector <- vector()
qualifier <- vector()
property <- vector()
i<- 2
k <- 1
for (i in 2:Size) {
date <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartDate"]])
time <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartTime"]][["Time"]])
dateTimeNow <- paste(date,time, sep=" ")
for (j in 1:numSamples) {
USGSPCode <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["USGSPCode"]])
data <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["ResultMeasure"]][["ResultMeasureValue"]])
noDetectionType <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitTypeName"]])
noDetectionLimit <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitMeasure"]][["MeasureValue"]])
propertyName <- gsub("[ (,)-]", ".", propertyName)
if (length(grep("Lower", noDetectionType)) > 0) {
propertyName <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["CharacteristicName"]])
remarkCode <- "<"
numSamples <- (xmlSize(r[["Organization"]][[i]])) - 2
data <- noDetectionLimit
} else if (length(grep("Upper", noDetectionType))> 0) {
remarkCode <- ">"
data <- noDetectionLimit
} else {
remarkCode <- NA
}
dateTimeList[k] <- as.character(dateTimeNow)
qualifier[k] <- as.character(remarkCode)
dataVector[k] <- as.numeric(data)
property[k] <- as.character(propertyName)
k <- k + 1
}
}
test <- as.data.frame(qualifier)
test$data <- dataVector
test$propertyName <- property
test$dateTime <- as.Date(dateTimeList)
data <- reshape(test, idvar="dateTime", timevar = "propertyName", direction="wide")
data$dateTime <- as.character(data$dateTime)
Sample <- compressData(data)
}
getAllSampleXMLData('04027000','00631','2000-01-01','2011-01-01')
siteNumber <- formatCheckSiteNumber(siteNumber)
ParameterCd <- formatCheckParameterCd(ParameterCd)
StartDate <- formatCheckDate(StartDate)
EndDate <- formatCheckDate(EndDate)
siteNumber <- formatCheckSiteNumber(04027000)
siteNumber <- formatCheckSiteNumber('04027000')
ParameterCd<-formatCheckParameterCd('006310')
ParameterCd<-formatCheckParameterCd('00631')
StartDate<-formatCheckDate('2000-01-01')
EndDate<-formatCheckDate('2011-01-01')
dateReturn <- checkStartEndDate(StartDate, EndDate)
StartDate <- dateReturn[1]
EndDate <- dateReturn[2]
StartDate <- format(as.Date(StartDate), format="%m-%d-%Y")
EndDate <- format(as.Date(EndDate), format="%m-%d-%Y")
baseURL <- "http://qwwebservices.usgs.gov/Result/search?siteid=USGS-"
#   baseURL <- "http://infotrek.er.usgs.gov/qw_portal_core/Result/search?siteid=USGS-"
url <- paste(baseURL,
siteNumber,
"&pCode=",
ParameterCd,
"&startDateLo=",
StartDate,
"&startDateHi=",
EndDate,
"&countrycode=US&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
url
url <- paste(baseURL,
siteNumber,
"&pCode=",
ParameterCd,
"&startDateLo=",
StartDate,
"&startDateHi=",
EndDate,
"&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
Size <- xmlSize(r[["Organization"]])
dateTimeList <- vector()
dataVector <- vector()
qualifier <- vector()
property <- vector()
i<- 2
k <- 1
for (i in 2:Size) {
date <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartDate"]])
time <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartTime"]][["Time"]])
dateTimeNow <- paste(date,time, sep=" ")
numSamples <- (xmlSize(r[["Organization"]][[i]])) - 2
for (j in 1:numSamples) {
USGSPCode <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["USGSPCode"]])
data <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["ResultMeasure"]][["ResultMeasureValue"]])
propertyName <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["CharacteristicName"]])
noDetectionType <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitTypeName"]])
noDetectionLimit <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitMeasure"]][["MeasureValue"]])
propertyName <- gsub("[ (,)-]", ".", propertyName)
if (length(grep("Lower", noDetectionType)) > 0) {
remarkCode <- "<"
data <- noDetectionLimit
} else if (length(grep("Upper", noDetectionType))> 0) {
remarkCode <- ">"
data <- noDetectionLimit
} else {
remarkCode <- NA
}
dateTimeList[k] <- as.character(dateTimeNow)
qualifier[k] <- as.character(remarkCode)
dataVector[k] <- as.numeric(data)
property[k] <- as.character(propertyName)
k <- k + 1
}
}
summary(k)
View(k)
test <- as.data.frame(qualifier)
test$data <- dataVector
test$propertyName <- property
test$dateTime <- as.Date(dateTimeList)
data <- reshape(test, idvar="dateTime", timevar = "propertyName", direction="wide")
data$dateTime <- as.character(data$dateTime)
Sample <- compressData(data)
}
Sample
View(Sample)
library(XML)
library(dataRetrieval)
getAllSampleXMLData <- function(siteNumber,ParameterCd,StartDate,EndDate){
siteNumber <- formatCheckSiteNumber(siteNumber)
ParameterCd <- formatCheckParameterCd(ParameterCd)
StartDate <- formatCheckDate(StartDate)
EndDate <- formatCheckDate(EndDate)
dateReturn <- checkStartEndDate(StartDate, EndDate)
StartDate <- dateReturn[1]
EndDate <- dateReturn[2]
StartDate <- format(as.Date(StartDate), format="%m-%d-%Y")
EndDate <- format(as.Date(EndDate), format="%m-%d-%Y")
baseURL <- "http://qwwebservices.usgs.gov/Result/search?siteid=USGS-"
#   baseURL <- "http://infotrek.er.usgs.gov/qw_portal_core/Result/search?siteid=USGS-"
url <- paste(baseURL,
siteNumber,
"&pCode=",
"&startDateLo=",
StartDate,
"&startDateHi=",
ParameterCd,
EndDate,
"&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
Size <- xmlSize(r[["Organization"]])
dateTimeList <- vector()
dataVector <- vector()
qualifier <- vector()
property <- vector()
i<- 2
k <- 1
for (i in 2:Size) {
date <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartDate"]])
time <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartTime"]][["Time"]])
dateTimeNow <- paste(date,time, sep=" ")
numSamples <- (xmlSize(r[["Organization"]][[i]])) - 2
for (j in 1:numSamples) {
USGSPCode <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["USGSPCode"]])
data <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["ResultMeasure"]][["ResultMeasureValue"]])
propertyName <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["CharacteristicName"]])
noDetectionType <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitTypeName"]])
noDetectionLimit <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitMeasure"]][["MeasureValue"]])
propertyName <- gsub("[ (,)-]", ".", propertyName)
if (length(grep("Lower", noDetectionType)) > 0) {
remarkCode <- "<"
data <- noDetectionLimit
} else if (length(grep("Upper", noDetectionType))> 0) {
remarkCode <- ">"
data <- noDetectionLimit
} else {
remarkCode <- NA
}
dateTimeList[k] <- as.character(dateTimeNow)
qualifier[k] <- as.character(remarkCode)
dataVector[k] <- as.numeric(data)
property[k] <- as.character(propertyName)
k <- k + 1
}
}
test <- as.data.frame(qualifier)
test$data <- dataVector
test$propertyName <- property
test$dateTime <- as.Date(dateTimeList)
data <- reshape(test, idvar="dateTime", timevar = "propertyName", direction="wide")
data$dateTime <- as.character(data$dateTime)
Sample <- compressData(data)
}
getAllSampleXMLData('04027000',)
getAllSampleXMLData('04027000','00631','1990-01-01','2012-01-01')
url
Sample
StartDate
StartDate<-'1990-01-01'
EndDate<-'2012-01-01'
dateReturn <- checkStartEndDate(StartDate, EndDate)
StartDate <- dateReturn[1]
EndDate <- dateReturn[2]
StartDate <- format(as.Date(StartDate), format="%m-%d-%Y")
EndDate <- format(as.Date(EndDate), format="%m-%d-%Y")
baseURL <- "http://qwwebservices.usgs.gov/Result/search?siteid=USGS-"
#   baseURL <- "http://infotrek.er.usgs.gov/qw_portal_core/Result/search?siteid=USGS-"
url <- paste(baseURL,
siteNumber,
"&pCode=",
ParameterCd,
"&startDateLo=",
StartDate,
"&startDateHi=",
EndDate,
"&mimeType=xml",sep = "")
doc <- xmlTreeParse(url, getDTD = F, useInternalNodes=TRUE)
r <- xmlRoot(doc)
Size <- xmlSize(r[["Organization"]])
dateTimeList <- vector()
dataVector <- vector()
qualifier <- vector()
i<- 2
property <- vector()
for (i in 2:Size) {
k <- 1
date <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartDate"]])
time <- xmlValue(r[["Organization"]][[i]][["ActivityDescription"]][["ActivityStartTime"]][["Time"]])
dateTimeNow <- paste(date,time, sep=" ")
numSamples <- (xmlSize(r[["Organization"]][[i]])) - 2
for (j in 1:numSamples) {
USGSPCode <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["USGSPCode"]])
data <-  xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["ResultMeasure"]][["ResultMeasureValue"]])
propertyName <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultDescription"]][["CharacteristicName"]])
noDetectionType <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitTypeName"]])
noDetectionLimit <- xmlValue(r[["Organization"]][[i]][[j+2]][["ResultLabInformation"]][["ResultDetectionQuantitationLimit"]][["DetectionQuantitationLimitMeasure"]][["MeasureValue"]])
propertyName <- gsub("[ (,)-]", ".", propertyName)
if (length(grep("Lower", noDetectionType)) > 0) {
remarkCode <- "<"
data <- noDetectionLimit
} else if (length(grep("Upper", noDetectionType))> 0) {
remarkCode <- ">"
data <- noDetectionLimit
} else {
remarkCode <- NA
}
dateTimeList[k] <- as.character(dateTimeNow)
qualifier[k] <- as.character(remarkCode)
dataVector[k] <- as.numeric(data)
property[k] <- as.character(propertyName)
k <- k + 1
}
}
test <- as.data.frame(qualifier)
test$data <- dataVector
test$propertyName <- property
test$dateTime <- as.Date(dateTimeList)
data <- reshape(test, idvar="dateTime", timevar = "propertyName", direction="wide")
data$dateTime <- as.character(data$dateTime)
Sample <- compressData(data)
Sample
StartDate
EndDAte
EndDate
url
numSamples
Size
install.packages(Rserve)
install.packages("Rserve")
a=3
a
5+3
library(devtools)
setwd("/users/jlthomps/WaterSMART/src/main/R/RProjects/")
load_all("HITHATStats/",reset = TRUE)
load_all("HITHATStats/",reset = TRUE)
load_all("HITHATStats/",reset = TRUE)
?load_all
setwd("/users/jlthomps/WaterSMART/src/main/R/RProjects/HITHATStats")
document()
check()
setwd("/users/jlthomps/WaterSMART/src/main/R/RProjects/")
build("HITHATStats")
